{"version":3,"file":"static/js/804.3b2f9109.chunk.js","mappings":"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","sources":["components/Charts/BarChart.js","components/Charts/ChartContainer.js","components/Charts/CircularChart.js","components/Charts/NoData.js","hooks/selectors/useProjectsSelector.js","components/Charts/LineChart.js","components/Dashboard/TasksCompletedLineChart.js","components/Dashboard/MostTasksBarChart.js","components/Dashboard/PriorityBarChart.js","components/Dashboard/TasksDonutChart.js","components/Dashboard/TechPieChart.js","components/Dashboard/Dashboard.js","screens/Dashboard/Dashboard.js"],"sourcesContent":["import useMediaQuery from \"@mui/material/useMediaQuery\";\nimport Chart from \"react-apexcharts\";\n\nimport { getChartOptions } from \"../../constants\";\nimport useThemeSelector from \"../../hooks/selectors/useThemeSelector\";\nimport NoData from \"./NoData\";\n\nfunction BarChart({\n  horizontal = false,\n  isMultiColor,\n  title,\n  xLabels,\n  series,\n  fillColors,\n  strokeColors,\n}) {\n  const smScreen = useMediaQuery((theme) => theme.breakpoints.down(\"md\"));\n  const { isDark } = useThemeSelector();\n\n  const options = {\n    ...getChartOptions({\n      title,\n      isDark,\n      fillColors,\n      strokeColors,\n    }),\n\n    plotOptions: {\n      bar: {\n        distributed: isMultiColor,\n        columnWidth: \"60%\",\n        horizontal,\n      },\n    },\n    legend: {\n      show: false,\n    },\n    xaxis: {\n      categories: xLabels,\n    },\n  };\n\n  return !series?.length || !series[0]?.data?.length ? (\n    <NoData />\n  ) : (\n    <Chart\n      type=\"bar\"\n      options={options}\n      series={series}\n      height={smScreen ? 300 : 400}\n    />\n  );\n}\n\nexport default BarChart;\n","import Paper from \"@mui/material/Paper\";\n\nfunction ChartContainer({ children }) {\n  return <Paper sx={{ px: 2, pt: 3, height: \"100%\" }}>{children}</Paper>;\n}\n\nexport default ChartContainer;\n","import Chart from \"react-apexcharts\";\n\nimport { getChartOptions } from \"../../constants\";\nimport useThemeSelector from \"../../hooks/selectors/useThemeSelector\";\nimport NoData from \"./NoData\";\n\nfunction CircularChart({\n  type = \"pie\",\n  title,\n  labels,\n  series,\n  fillColors,\n  labelColors,\n  strokeColors,\n  legendOffset = 0,\n}) {\n  const { isDark } = useThemeSelector();\n\n  const options = {\n    ...getChartOptions({\n      title,\n      isDark,\n      fillColors,\n      labelColors,\n      strokeColors,\n    }),\n\n    labels,\n    tooltip: {\n      theme: \"dark\",\n    },\n    responsive: [\n      {\n        breakpoint: 480,\n        options: {\n          legend: {\n            show: false,\n          },\n          plotOptions: {\n            pie: {\n              expandOnClick: false,\n              donut: {\n                labels: {\n                  show: type === \"donut\",\n                },\n              },\n            },\n          },\n        },\n      },\n    ],\n    legend: {\n      position: \"right\",\n      offsetY: legendOffset,\n    },\n  };\n\n  return !series?.length ? (\n    <NoData />\n  ) : (\n    <Chart type={type} options={options} series={series} />\n  );\n}\n\nexport default CircularChart;\n","import useMediaQuery from \"@mui/material/useMediaQuery\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\n\nimport Spinner from \"../Shared/Loaders/Spinner\";\n\nfunction NoData({ loading }) {\n  const smScreen = useMediaQuery((theme) => theme.breakpoints.down(\"md\"));\n\n  return (\n    <Box height={smScreen ? 300 : 400} position=\"relative\">\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Typography\n          align=\"center\"\n          color=\"text.secondary\"\n          className=\"center-absolute\"\n        >\n          Nothing to see here\n        </Typography>\n      )}\n    </Box>\n  );\n}\n\nexport default NoData;\n","import { useSelector } from \"react-redux\";\n\nfunction useProjectsSelector() {\n  const projectsState = useSelector((state) => state.projects);\n  return projectsState;\n}\n\nexport default useProjectsSelector;\n","import useMediaQuery from \"@mui/material/useMediaQuery\";\nimport Chart from \"react-apexcharts\";\n\nimport { getChartOptions } from \"../../constants\";\nimport useThemeSelector from \"../../hooks/selectors/useThemeSelector\";\nimport NoData from \"./NoData\";\n\nfunction LineChart({ type = \"line\", smooth, title, xLabels, series }) {\n  const smScreen = useMediaQuery((theme) => theme.breakpoints.down(\"md\"));\n  const { isDark } = useThemeSelector();\n\n  const options = {\n    ...getChartOptions({\n      title,\n      isDark,\n    }),\n\n    stroke: {\n      curve: smooth ? \"smooth\" : \"straight\",\n    },\n    xaxis: {\n      categories: xLabels,\n      tooltip: {\n        enabled: false,\n      },\n    },\n    yaxis: {\n      labels: {\n        formatter: (value) => value.toFixed(0),\n      },\n    },\n    markers: {\n      size: 5,\n    },\n  };\n\n  return !series?.length || !series[0]?.data?.length ? (\n    <NoData />\n  ) : (\n    <Chart\n      type={type}\n      options={options}\n      series={series}\n      height={smScreen ? 300 : 400}\n    />\n  );\n}\n\nexport default LineChart;\n","import { useState, useEffect } from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nimport useProjectsSelector from \"../../hooks/selectors/useProjectsSelector\";\nimport ChartContainer from \"../Charts/ChartContainer\";\nimport LineChart from \"../Charts/LineChart\";\nimport NoData from \"../Charts/NoData\";\n\nfunction TasksCompletedLineChart() {\n  const { projects, loading } = useProjectsSelector();\n  const [taskCountObj, setTaskCountObj] = useState(null);\n  const [drawing, setDrawing] = useState(true);\n\n  useEffect(() => {\n    if (projects.length) {\n      let taskObjsArr = projects.reduce((acc, project) => {\n        acc.push(project.tasks);\n        return acc;\n      }, []);\n\n      taskObjsArr = taskObjsArr.flat();\n      const doneTasksObjsArr = taskObjsArr.filter(\n        (task) => task.type === \"done\"\n      );\n\n      const tasksCountOnDateObj = {};\n\n      doneTasksObjsArr.forEach((task) => {\n        let taskDate = new Date(task.updatedAt).toLocaleDateString(\"default\", {\n          day: \"numeric\",\n          month: \"short\",\n          year: \"2-digit\",\n        });\n\n        !tasksCountOnDateObj[taskDate]\n          ? (tasksCountOnDateObj[taskDate] = 1)\n          : (tasksCountOnDateObj[taskDate] += 1);\n      });\n\n      const dates = Object.keys(tasksCountOnDateObj);\n      dates.sort((a, b) => new Date(a) - new Date(b));\n\n      const finalTasksCount = {};\n      dates\n        .slice(-5)\n        .forEach((date) => (finalTasksCount[date] = tasksCountOnDateObj[date]));\n\n      setTaskCountObj(finalTasksCount);\n    }\n\n    !loading && setDrawing(false);\n  }, [projects, loading]);\n\n  return (\n    <ChartContainer>\n      <Typography variant=\"h5\" align=\"center\">\n        Tasks completed\n      </Typography>\n\n      {taskCountObj ? (\n        <LineChart\n          series={[\n            {\n              name: \"Tasks\",\n              data: Object.values(taskCountObj),\n            },\n          ]}\n          xLabels={Object.keys(taskCountObj)}\n        />\n      ) : (\n        <NoData loading={drawing} />\n      )}\n    </ChartContainer>\n  );\n}\n\nexport default TasksCompletedLineChart;\n","import { useState, useEffect } from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { isZerosArr } from \"../../utils/arrayHelpers\";\nimport useProjectsSelector from \"../../hooks/selectors/useProjectsSelector\";\nimport ChartContainer from \"../Charts/ChartContainer\";\nimport BarChart from \"../Charts/BarChart\";\nimport NoData from \"../Charts/NoData\";\n\nfunction MostTasksBarChart() {\n  const { projects, loading } = useProjectsSelector();\n  const [projectTasksObj, setProjectTasksObj] = useState(null);\n  const [drawing, setDrawing] = useState(true);\n\n  useEffect(() => {\n    if (projects.length) {\n      let tasksByProjectObj = projects.reduce((acc, project) => {\n        acc[project.name] = project.tasks.length;\n        return acc;\n      }, {});\n\n      const sortedProjectNames = Object.keys(tasksByProjectObj).sort(\n        (a, b) => tasksByProjectObj[b] - tasksByProjectObj[a]\n      );\n\n      let tasksByProjectObjFinal = {};\n      sortedProjectNames\n        .slice(0, 5)\n        .forEach(\n          (projectName) =>\n            (tasksByProjectObjFinal[projectName] =\n              tasksByProjectObj[projectName])\n        );\n\n      const areAllValuesZeros = isZerosArr(\n        Object.values(tasksByProjectObjFinal)\n      );\n      setProjectTasksObj(areAllValuesZeros ? {} : tasksByProjectObjFinal);\n    }\n\n    !loading && setDrawing(false);\n  }, [projects, loading]);\n\n  return (\n    <ChartContainer>\n      <Typography variant=\"h5\" align=\"center\">\n        Most tasks\n      </Typography>\n\n      {projectTasksObj ? (\n        <BarChart\n          horizontal\n          isMultiColor\n          series={[\n            {\n              name: \"Tasks\",\n              data: Object.values(projectTasksObj),\n            },\n          ]}\n          xLabels={Object.keys(projectTasksObj)}\n        />\n      ) : (\n        <NoData loading={drawing} />\n      )}\n    </ChartContainer>\n  );\n}\n\nexport default MostTasksBarChart;\n","import { useState, useEffect } from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { isZerosArr } from \"../../utils/arrayHelpers\";\nimport useProjectsSelector from \"../../hooks/selectors/useProjectsSelector\";\nimport ChartContainer from \"../Charts/ChartContainer\";\nimport BarChart from \"../Charts/BarChart\";\nimport NoData from \"../Charts/NoData\";\n\nfunction PriorityBarChart() {\n  const { projects, loading } = useProjectsSelector();\n  const [priorityCountObj, setPriorityCountObj] = useState(null);\n  const [drawing, setDrawing] = useState(true);\n\n  useEffect(() => {\n    if (projects.length) {\n      let taskObjsArr = projects.reduce((acc, project) => {\n        acc.push(project.tasks);\n        return acc;\n      }, []);\n\n      taskObjsArr = taskObjsArr.flat();\n      const taskPriorityCountObj = { low: 0, medium: 0, high: 0 };\n\n      taskObjsArr.forEach((taskObj) => {\n        taskPriorityCountObj[taskObj?.priority] += 1;\n      });\n\n      const areAllValuesZeros = isZerosArr(Object.values(taskPriorityCountObj));\n      setPriorityCountObj(areAllValuesZeros ? {} : taskPriorityCountObj);\n    }\n\n    !loading && setDrawing(false);\n  }, [projects, loading]);\n\n  return (\n    <ChartContainer>\n      <Typography variant=\"h5\" align=\"center\">\n        Tasks by priority\n      </Typography>\n      <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\" mb={2}>\n        across projects\n      </Typography>\n\n      {priorityCountObj ? (\n        <BarChart\n          series={[\n            {\n              name: \"Tasks\",\n              data: Object.values(priorityCountObj),\n            },\n          ]}\n          xLabels={Object.keys(priorityCountObj)}\n        />\n      ) : (\n        <NoData loading={drawing} />\n      )}\n    </ChartContainer>\n  );\n}\n\nexport default PriorityBarChart;\n","import { useState, useEffect } from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { isZerosArr } from \"../../utils/arrayHelpers\";\nimport useProjectsSelector from \"../../hooks/selectors/useProjectsSelector\";\nimport ChartContainer from \"../Charts/ChartContainer\";\nimport DonutChart from \"../Charts/CircularChart\";\nimport NoData from \"../Charts/NoData\";\n\nfunction TasksDonutChart() {\n  const { projects, loading } = useProjectsSelector();\n  const [taskTypeCountObj, setTaskTypeCountObj] = useState(null);\n  const [drawing, setDrawing] = useState(true);\n\n  useEffect(() => {\n    if (projects.length) {\n      let taskObjsArr = projects.reduce((acc, project) => {\n        acc.push(project.tasks);\n        return acc;\n      }, []);\n\n      taskObjsArr = taskObjsArr.flat();\n      const typeCountObj = { todo: 0, in_progress: 0, done: 0 };\n\n      taskObjsArr.forEach((taskObj) => {\n        typeCountObj[taskObj?.type] += 1;\n      });\n\n      const areAllValuesZeros = isZerosArr(Object.values(typeCountObj));\n      setTaskTypeCountObj(areAllValuesZeros ? {} : typeCountObj);\n    }\n\n    !loading && setDrawing(false);\n  }, [projects, loading]);\n\n  return (\n    <ChartContainer>\n      <Typography variant=\"h5\" align=\"center\">\n        Tasks distribution\n      </Typography>\n      <Typography variant=\"body2\" align=\"center\" color=\"text.secondary\" mb={2}>\n        across projects\n      </Typography>\n\n      {taskTypeCountObj ? (\n        <DonutChart\n          type=\"donut\"\n          series={Object.values(taskTypeCountObj)}\n          labels={[\"Todo\", \"In progress\", \"Done\"]}\n        />\n      ) : (\n        <NoData loading={drawing} />\n      )}\n    </ChartContainer>\n  );\n}\n\nexport default TasksDonutChart;\n","import { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { getProjects } from \"../../store/projects/side-effects\";\nimport useProjectsSelector from \"../../hooks/selectors/useProjectsSelector\";\nimport ChartContainer from \"../Charts/ChartContainer\";\nimport PieChart from \"../Charts/CircularChart\";\nimport NoData from \"../Charts/NoData\";\n\nfunction TechPieChart() {\n  const { projects, loading } = useProjectsSelector();\n  const [techCountObj, setTechCountObj] = useState(null);\n  const [drawing, setDrawing] = useState(true);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getProjects());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (projects.length) {\n      let techObjsArr = projects.reduce((acc, project) => {\n        acc.push(project.technologies);\n        return acc;\n      }, []);\n\n      techObjsArr = techObjsArr.flat();\n\n      const techArr = techObjsArr.reduce((acc, techObj) => {\n        acc.push(techObj?.technology?.toLowerCase());\n        return acc;\n      }, []);\n\n      const techCountMap = {};\n\n      techArr.forEach((tech) => {\n        // if technology doesn't exist in the object, initialize it to 1,\n        // otherwise increment it's count by 1\n        !techCountMap[tech]\n          ? (techCountMap[tech] = 1)\n          : (techCountMap[tech] += 1);\n      });\n\n      setTechCountObj(techCountMap);\n    }\n\n    !loading && setDrawing(false);\n  }, [projects, loading]);\n\n  return (\n    <ChartContainer>\n      <Typography variant=\"h5\" align=\"center\" mb={2}>\n        Technologies used\n      </Typography>\n\n      {techCountObj ? (\n        <PieChart\n          series={Object.values(techCountObj)}\n          labels={Object.keys(techCountObj)}\n        />\n      ) : (\n        <NoData loading={drawing} />\n      )}\n    </ChartContainer>\n  );\n}\n\nexport default TechPieChart;\n","import Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\n\nimport TasksCompletedLineChart from \"./TasksCompletedLineChart\";\nimport MostTasksBarChart from \"./MostTasksBarChart\";\nimport PriorityBarChart from \"./PriorityBarChart\";\nimport TasksDonutChart from \"./TasksDonutChart\";\nimport TechPieChart from \"./TechPieChart\";\n\nfunction Dashboard() {\n  return (\n    <Container>\n      <Typography variant=\"h4\" mb={2} sx={{ fontWeight: \"bold\" }}>\n        Dashboard\n      </Typography>\n\n      <Grid container spacing={5} mb={3} justifyContent=\"center\">\n        <Grid item xs={12} sm={6}>\n          <TasksCompletedLineChart />\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <MostTasksBarChart />\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <TasksDonutChart />\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <PriorityBarChart />\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <TechPieChart />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default Dashboard;\n","import DashboardC from \"../../components/Dashboard/Dashboard\";\n\nfunction Dashboard() {\n  return <DashboardC />;\n}\n\nexport default Dashboard;\n"],"names":["_ref","_series$","_series$$data","horizontal","isMultiColor","title","xLabels","series","fillColors","strokeColors","smScreen","useMediaQuery","theme","breakpoints","down","isDark","useThemeSelector","options","getChartOptions","plotOptions","bar","distributed","columnWidth","legend","show","xaxis","categories","length","data","_jsx","Chart","type","height","NoData","children","Paper","sx","px","pt","labels","labelColors","legendOffset","tooltip","responsive","breakpoint","pie","expandOnClick","donut","position","offsetY","loading","Box","Spinner","Typography","align","color","className","useSelector","state","projects","smooth","stroke","curve","enabled","yaxis","formatter","value","toFixed","markers","size","useProjectsSelector","taskCountObj","setTaskCountObj","useState","drawing","setDrawing","useEffect","taskObjsArr","reduce","acc","project","push","tasks","flat","doneTasksObjsArr","filter","task","tasksCountOnDateObj","forEach","taskDate","Date","updatedAt","toLocaleDateString","day","month","year","dates","Object","keys","sort","a","b","finalTasksCount","slice","date","_jsxs","ChartContainer","variant","LineChart","name","values","projectTasksObj","setProjectTasksObj","tasksByProjectObj","sortedProjectNames","tasksByProjectObjFinal","projectName","areAllValuesZeros","isZerosArr","BarChart","priorityCountObj","setPriorityCountObj","taskPriorityCountObj","low","medium","high","taskObj","priority","mb","taskTypeCountObj","setTaskTypeCountObj","typeCountObj","todo","in_progress","done","DonutChart","techCountObj","setTechCountObj","dispatch","useDispatch","getProjects","techObjsArr","technologies","techArr","techObj","_techObj$technology","technology","toLowerCase","techCountMap","tech","PieChart","Container","fontWeight","Grid","container","spacing","justifyContent","item","xs","sm","TasksCompletedLineChart","MostTasksBarChart","TasksDonutChart","PriorityBarChart","TechPieChart","DashboardC"],"sourceRoot":""}